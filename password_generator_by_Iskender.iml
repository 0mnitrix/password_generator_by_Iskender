import java.security.SecureRandom;
import java.util.Scanner;

public class PasswordGenerator {
    private static final String LOWERCASE = "abcdefghijklmnopqrstuvwxyz";
    private static final String UPPERCASE = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    private static final String NUMBERS = "0123456789";
    private static final String SYMBOLS = "!@#$%^&*()-_=+[]{}|;:',.<>?/";

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter minimum password length: ");
        int minLength = scanner.nextInt();
        System.out.print("Enter maximum password length: ");
        int maxLength = scanner.nextInt();
        scanner.nextLine();

        if (minLength > maxLength || minLength <= 0) {
            System.out.println("Invalid length values.");
            scanner.close();
            return;
        }

        System.out.print("Include lowercase letters? (yes/no): ");
        boolean includeLower = scanner.nextLine().trim().equalsIgnoreCase("yes");
        System.out.print("Include uppercase letters? (yes/no): ");
        boolean includeUpper = scanner.nextLine().trim().equalsIgnoreCase("yes");
        System.out.print("Include numbers? (yes/no): ");
        boolean includeNumbers = scanner.nextLine().trim().equalsIgnoreCase("yes");
        System.out.print("Include symbols? (yes/no): ");
        boolean includeSymbols = scanner.nextLine().trim().equalsIgnoreCase("yes");

        System.out.print("Do you want to add a custom character set? (yes/no): ");
        boolean includeCustom = scanner.nextLine().trim().equalsIgnoreCase("yes");
        String customChars = "";
        if (includeCustom) {
            System.out.print("Enter custom characters: ");
            customChars = scanner.nextLine();
        }

        StringBuilder charPool = new StringBuilder();
        if (includeLower) {
            charPool.append(LOWERCASE);
        }
        if (includeUpper) {
            charPool.append(UPPERCASE);
        }
        if (includeNumbers) {
            charPool.append(NUMBERS);
        }
        if (includeSymbols) {
            charPool.append(SYMBOLS);
        }
        if (includeCustom && !customChars.isEmpty()) {
            charPool.append(customChars);
        }

        if (charPool.length() == 0) {
            System.out.println("No character types selected. Exiting.");
            scanner.close();
            return;
        }

        SecureRandom random = new SecureRandom();
        int passwordLength = minLength + random.nextInt(maxLength - minLength + 1);
        StringBuilder password = new StringBuilder();

        for (int i = 0; i < passwordLength; i++) {
            int index = random.nextInt(charPool.length());
            password.append(charPool.charAt(index));
        }

        System.out.println("\nGenerated Password: " + password.toString());
        int strengthScore = estimatePasswordStrength(password.toString());
        System.out.println("Password Strength Score: " + strengthScore + " / 4");
        scanner.close();
    }

    private static int estimatePasswordStrength(String password) {
        int score = 0;
        if (password.length() >= 8) score++;
        if (password.matches(".*[A-Z].*")) score++;
        if (password.matches(".*[a-z].*")) score++;
        if (password.matches(".*[0-9].*")) score++;
        if (password.matches(".*[!@#$%^&*()\\-_=+\\[\\]{}|;:',.<>/?].*")) score++;
        return Math.min(score, 4);
    }
}
